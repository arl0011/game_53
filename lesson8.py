import sqlite3


def create_connection(db_name):
    try:
        return sqlite3.connect(db_name)
    except sqlite3.Error as e:
        print(e)
        return None


def create_tables(conn):
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS countries (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL
        );
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS cities (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            area REAL DEFAULT 0.0,
            country_id INTEGER,
            FOREIGN KEY (country_id) REFERENCES countries(id)
        );
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS students (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            first_name TEXT NOT NULL,
            last_name TEXT NOT NULL,
            city_id INTEGER,
            FOREIGN KEY (city_id) REFERENCES cities(id)
        );
    ''')

    conn.commit()


def insert_data(conn):
    cursor = conn.cursor()

    countries = [("–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω",), ("–ì–µ—Ä–º–∞–Ω–∏—è",), ("–ö–∏—Ç–∞–π",)]
    cursor.executemany("INSERT INTO countries (title) VALUES (?)", countries)

    cities = [
        ("–ë–∏—à–∫–µ–∫", 127.0, 1),
        ("–û—à", 182.0, 1),
        ("–ë–µ—Ä–ª–∏–Ω", 891.8, 2),
        ("–ú—é–Ω—Ö–µ–Ω", 310.7, 2),
        ("–ü–µ–∫–∏–Ω", 16410.54, 3),
        ("–®–∞–Ω—Ö–∞–π", 6340.5, 3),
        ("–ì—É–∞–Ω—á–∂–æ—É", 7434.4, 3),
    ]
    cursor.executemany("INSERT INTO cities (title, area, country_id) VALUES (?, ?, ?)", cities)

    students = [
        ("–ê–π–∂–∞–Ω", "–ê—Å–∞–Ω–æ–≤–∞", 1),
        ("–ù—É—Ä–ª–∞–Ω", "–ò–º–∞–Ω–∫—É–ª–æ–≤", 2),
        ("–ê–ª–º–∞–∑", "–¢–æ–∫—Ç–æ–≥—É–ª–æ–≤", 3),
        ("–°–∞–∞–¥–∞", "–®–µ—Ä–º–∞—Ç–æ–≤–∞", 3),
        ("–ì—É–ª—å–Ω–∞—Ä–∞", "–î–∂—É–º–∞–µ–≤–∞", 4),
        ("–ê–º–∞–Ω", "–¢–æ–∫–æ–±–∞–µ–≤", 1),
        ("–≠–ª–Ω—É—Ä–∞", "–ö–∞—Ä–∞–≥—É–ª–æ–≤–∞", 5),
        ("–î–∏–Ω–∞—Ä–∞", "–°–∞—Ä–∏–µ–≤", 6),
        ("–≠–ª—å–¥–∞—Ä", "–ë–µ–∫–µ—à–æ–≤", 6),
        ("–ê–π–±–µ–∫", "–ö—É—Ä–º–∞–Ω–±–µ–∫–æ–≤", 2),
        ("–≠–º–∏–ª—å", "–ù–∏—è–∑–æ–≤", 1),
        ("–ê–Ω–∞—Ä–∞", "–¢—É—Ä–≥–∞–Ω–±–∞–µ–≤–∞", 4),
        ("–°–∞–∏–¥–∞", "–ß–æ—Ç–±–∞–µ–≤", 7),
        ("–ú–∞—Ä–∏—è", "–ö—É–Ω—Ü–µ", 3),
        ("–ñ–∞–Ω–∞—Ä–∞", "–î—É–π—à–µ–µ–≤–∞", 5)
    ]
    cursor.executemany("INSERT INTO students (first_name, last_name, city_id) VALUES (?, ?, ?)", students)

    conn.commit()
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")


def list_cities(conn):
    cursor = conn.cursor()
    cursor.execute("SELECT id, title FROM cities")
    return cursor.fetchall()


def show_students_by_city_id(conn, city_id):
    cursor = conn.cursor()
    cursor.execute('''
        SELECT s.first_name, s.last_name, c.title AS city, c.area, ct.title AS country
        FROM students s
        JOIN cities c ON s.city_id = c.id
        JOIN countries ct ON c.country_id = ct.id
        WHERE s.city_id = ?
    ''', (city_id,))
    students = cursor.fetchall()

    if students:
        print("\nüìã –£—á–µ–Ω–∏–∫–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ:")
        for s in students:
            print(f"{s[0]} {s[1]} ‚Äî {s[4]}, {s[2]} (–ø–ª–æ—â–∞–¥—å: {s[3]} –∫–º¬≤)")
    else:
        print("‚ùå –í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.")


def main():
    conn = create_connection("students.db")

    if conn:
        create_tables(conn)

        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM countries")
        if cursor.fetchone()[0] == 0:
            insert_data(conn)

        while True:
            print("\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É ID –≥–æ—Ä–æ–¥–∞ –∏–∑ –ø–µ—Ä–µ—á–Ω—è –Ω–∏–∂–µ.")
            print("–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤–≤–µ–¥–∏—Ç–µ 0:\n")

            cities = list_cities(conn)
            for city in cities:
                print(f"{city[0]}. {city[1]}")

            try:
                user_input = int(input("\n–í–≤–µ–¥–∏—Ç–µ ID –≥–æ—Ä–æ–¥–∞: "))
                if user_input == 0:
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                show_students_by_city_id(conn, user_input)
            except ValueError:
                print("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ).")

        conn.close()


if __name__ == "__main__":
    main()